"""
Завдання_2.
З використанням технології черги – queue організувати модель обробки потоку звернень до сервера (back-end) від множини клієнтів (front-end).
Тобто маємо ситуацію обробки декількох черг.
В якості алгоритму рішення рекомендується розглянути сценарії: «черга – черг», «стек – черг», «черга / стек з пріоритетами».

---------------------------------------------------------------------------------------------------------------------------------------------
Приклад - модель реалізації обслуговування потоків завдань в черзі.

Модуль queue реалізує черги з кількома джерелами та кількома споживачами.
Це особливо корисно в потоковому програмуванні, коли необхідно безпечно обмінюватися інформацією між декількома потоками.
Клас Queue у цьому модулі реалізує всю необхідну семантику блокування.

https://docs.python.org/3/library/queue.html

---------------------------------------------------------------------------------------------------------------------------------------------

"""

import threading    # паралельні процеси для потоків https://docs.python.org/3/library/threading.html
import queue        # чергі для потоків https://docs.python.org/3/library/threading.html

q = queue.Queue()

def worker():                                          # функція організація робіт
    while True:
        item = q.get()
        print(f'Working on {item}')
        print(f'Finished {item}')
        q.task_done()

if __name__ == '__main__':


    threading.Thread(target=worker, daemon=True).start()  # Увімкніть робочий потік


    for item in range(30):                                # Надішліть робочому потоку тридцять запитів на завдання
        q.put(item)


    q.join()                                             # блокувати, доки всі елементи в черзі не будуть отримані та оброблені.
    print('All work completed')


